// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: links.sql

package repository

import (
	"context"
)

const deleteBySlug = `-- name: DeleteBySlug :one
DELETE FROM links
WHERE slug = $1
RETURNING id, location, slug
`

func (q *Queries) DeleteBySlug(ctx context.Context, slug string) (Link, error) {
	row := q.db.QueryRow(ctx, deleteBySlug, slug)
	var i Link
	err := row.Scan(&i.ID, &i.Location, &i.Slug)
	return i, err
}

const findAll = `-- name: FindAll :many
SELECT id, location, slug FROM links
`

func (q *Queries) FindAll(ctx context.Context) ([]Link, error) {
	rows, err := q.db.Query(ctx, findAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Link{}
	for rows.Next() {
		var i Link
		if err := rows.Scan(&i.ID, &i.Location, &i.Slug); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findBySlug = `-- name: FindBySlug :one
SELECT id, location, slug FROM links
WHERE slug = $1
LIMIT 1
`

func (q *Queries) FindBySlug(ctx context.Context, slug string) (Link, error) {
	row := q.db.QueryRow(ctx, findBySlug, slug)
	var i Link
	err := row.Scan(&i.ID, &i.Location, &i.Slug)
	return i, err
}

const insertOne = `-- name: InsertOne :one
INSERT INTO links (
  location, slug
) VALUES (
  $1, $2
) RETURNING id, location, slug
`

type InsertOneParams struct {
	Location string `json:"location"`
	Slug     string `json:"slug"`
}

func (q *Queries) InsertOne(ctx context.Context, arg InsertOneParams) (Link, error) {
	row := q.db.QueryRow(ctx, insertOne, arg.Location, arg.Slug)
	var i Link
	err := row.Scan(&i.ID, &i.Location, &i.Slug)
	return i, err
}

const updateLocation = `-- name: UpdateLocation :one
UPDATE links
SET location = $2
WHERE slug = $1
RETURNING id, location, slug
`

type UpdateLocationParams struct {
	Slug     string `json:"slug"`
	Location string `json:"location"`
}

func (q *Queries) UpdateLocation(ctx context.Context, arg UpdateLocationParams) (Link, error) {
	row := q.db.QueryRow(ctx, updateLocation, arg.Slug, arg.Location)
	var i Link
	err := row.Scan(&i.ID, &i.Location, &i.Slug)
	return i, err
}
